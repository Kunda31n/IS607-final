con <- dbConnect(drv, host=dbhost, port=dbport, dbname=dbname,user=dbuser, password=dbpass)
query <- dbSendQuery(
con, query <- "select * from public.airlines")
df_airlines <- fetch(query,n=-1)
dbDisconnect(con)
m <- mongo.create(host = "localhost")
mongo.is.connected(m)
#version of MongoDB may be at issue with no data returned here!
db <- "flights"
mongo.get.database.collections(m, db = db)
b_airlines <- mongo.bson.from.df(df_airlines)
#airlines
ns <- paste(db, "airlines", sep=".")
lst <- split(df_airlines, rownames(df_airlines))
bson_lst <- lapply(lst, mongo.bson.from.list)
mongo.drop(m,ns)
mongo.insert.batch(mongo = m, ns = "flights.airlines", lst = bson_lst)
ns <- paste(db, "airlines", sep=".")
c_airlines <- mongo.bson.to.list(mongo.bson.from.list(mongo.find.batch(m, ns)))
df_airlines <- as.data.frame(lapply(c_airlines, data.frame, stringsAsFactors = FALSE))
df_airlines <- as.data.frame(lapply(c_airlines, data.frame, stringsAsFactors = FALSE))
df_airlines <- as.data.frame(lapply(c_airlines, data.frame, stringsAsFactors = FALSE))
mongo.find.batch(m, ns)
mongo.bson.from.list(mongo.find.batch(m, ns))
mongo.bson.to.list(mongo.bson.from.list(mongo.find.batch(m, ns)))
df_airlines <- as.data.frame(lapply(c_airlines$`1`, data.frame, stringsAsFactors = FALSE))
View(df_airlines)
View(df_airlines)
View(df_airlines)
c_airlines
c_airlines[1]
c_airlines[1]
lapply(c_airlines, data.frame, stringsAsFactors = FALSE)
df_airlines <- lapply(c_airlines, data.frame, stringsAsFactors = FALSE)
class(df_airlines)
data.frame(df_airlines)
df_airlines
rbind_all(df_airlines)
data.frame(df_airlines)
df_airlines <- data.frame(df_airlines)
rbind_all(df_airlines)
l_airlines <- lapply(c_airlines, data.frame, stringsAsFactors = FALSE)
rbind_all(l_airlines)
l_airlines$carrier
l_airlines$carrier
data.frame(rbind_all(l_airlines))
df_airlines <- data.frame(rbind_all(l_airlines))
View(df_airlines)
kable(df_airlines[,c{2,3}],align='l')
kable(df_airlines[,c(2,3)],align='l')
kable(df_airlines,align='l')
install.packages("inez")
install.packages("ineq")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("ggmap", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("ineq", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Distr1 <- c( A=137, B=499, C=311, D=173, E=219, F=81)
Distr1 <- Lc(Distr1, n = rep(1,length(Distr1)), plot =F)
plot(Distr1,
col="black",
#type="b",      # !is not working
lty=1,
lwd=3,
main="Lorenz Curve for Sample Distribution"
)
legend("topleft",
c("Distr1""),
lty=c(1,2,3),
lwd=3
)
plot(Distr1,
col="black",
#type="b",      # !is not working
lty=1,
lwd=3,
main="Lorenz Curve for Sample Distribution"
)
legend("topleft",c("Distr1""),lty=c(1),lwd=3)
Distr1 <- c( A=137, B=499, C=311, D=173, E=219, F=81)
Distr1 <- Lc(Distr1, n = rep(1,length(Distr1)), plot =F)
plot(Distr1,
col="black",
#type="b",      # !is not working
lty=1,
lwd=3,
main="Lorenz Curve for Sample Distribution"
)
legend("topleft",c("Distr1""),lty=c(1),lwd=3)
1 <- c( A=137, B=499, C=311, D=173, E=219, F=81)
Boundary1 <- Lc(Boundary1, n = rep(1,length(Boundary1)), plot =F)
```
plot(Boundary1,
col="black",
#type="b",      # !is not working
lty=1,
lwd=3,
main="Lorenz Curve for Sample Distribution"
)
legend("topleft",c("Boundary1"),lty=c(1),lwd=3)
Boundary1 <- c( A=137, B=499, C=311, D=173, E=219, F=81)
Boundary1 <- Lc(Boundary1, n = rep(1,length(Boundary1)), plot =F)
plot(Boundary1,col="black",lty=1,lwd=3,main="Lorenz Curve for Sample Distribution")
legend("topleft",c("Boundary1"),lty=c(1),lwd=3)
xlab="X-axis label", ylab="y-axix label",xlim=c(xmin, xmax), ylim=c(ymin, ymax))
library(ineq)
library(rgdal)        # for readOGR(...)
library(RColorBrewer) # for brewer.pal(...)
library(data.table)
library(maptools)
library(maps)
library(ggplot2)
library(ggthemes)
library(graphics)
library(jsonlite)
library(tigris)
library(tidyr)
library(dplyr)
library(RCurl)
library(rworldmap)
library(ineq)
library(rgdal)        # for readOGR(...)
library(RColorBrewer) # for brewer.pal(...)
library(data.table)
library(maptools)
library(maps)
library(ggplot2)
library(ggthemes)
library(graphics)
library(jsonlite)
library(tigris)
library(tidyr)
library(dplyr)
library(RCurl)
library(rworldmap)
worlddata = subset(read.csv(text = getURL("https://raw.githubusercontent.com/cyadusha/Popular-indicators/master/55e42714-cbf5-42ee-9995-eed3fc8d3102_Data.csv"), sep = ","), select = c(Country.Name, X1981..YR1981., X2013..YR2013.))
colnames(worlddata)[1] = "Country Name"
colnames(worlddata)[2] = "1981GINI"
colnames(worlddata)[3] = "2013GINI"
worlddata = worlddata[1:214,]
worlddata$`1981GINI` = as.numeric(as.vector(worlddata$`1981GINI`))
worlddata$`2013GINI` = as.numeric(as.vector(worlddata$`2013GINI`))
worlddata$`1981GINI` = as.vector(worlddata$`1981GINI`/100)
worlddata$`2013GINI` = as.vector(worlddata$`2013GINI`/100)
n = joinCountryData2Map(worlddata, joinCode="NAME", nameJoinColumn="Country Name")
par(mfrow=c(2,1))
plot1 = mapCountryData(n, nameColumnToPlot="1981GINI", mapTitle = "1981", addLegend = F)
do.call(addMapLegend, c(plot1, legendLabels="all", legendIntervals="data", legendMar = 2 ))
plot2 = mapCountryData(n, nameColumnToPlot="2013GINI", mapTitle = "2013", addLegend = F)
do.call(addMapLegend, c(plot1, legendLabels="all", legendIntervals="data", legendMar = 2 ))
plot1 = mapCountryData(n, nameColumnToPlot="1981GINI", mapTitle = "1981", addLegend = F)
do.call(addMapLegend, c(plot1, legendLabels="all", legendIntervals="data", legendMar = 2 ))
plot2 = mapCountryData(n, nameColumnToPlot="2013GINI", mapTitle = "2013", addLegend = F)
do.call(addMapLegend, c(plot1, legendLabels="all", legendIntervals="data", legendMar = 2 ))
plot1 = mapCountryData(n, nameColumnToPlot="1981GINI", mapTitle = "1981", addLegend = F)
do.call(addMapLegend, c(plot1, legendLabels="all", legendIntervals="data", legendMar = 2 ))
par(mfrow=c(1,2))
plot1 = mapCountryData(n, nameColumnToPlot="1981GINI", mapTitle = "1981", addLegend = F)
do.call(addMapLegend, c(plot1, legendLabels="all", legendIntervals="data", legendMar = 2 ))
plot2 = mapCountryData(n, nameColumnToPlot="2013GINI", mapTitle = "2013", addLegend = F)
do.call(addMapLegend, c(plot1, legendLabels="all", legendIntervals="data", legendMar = 2 ))
par(mfrow=c(2,1))
plot1 = mapCountryData(n, nameColumnToPlot="1981GINI", mapTitle = "1981", addLegend = F)
do.call(addMapLegend, c(plot1, legendLabels="all", legendIntervals="data", legendMar = 2 ))
plot2 = mapCountryData(n, nameColumnToPlot="2013GINI", mapTitle = "2013", addLegend = F)
do.call(addMapLegend, c(plot1, legendLabels="all", legendIntervals="data", legendMar = 2 ))
par(mfrow=c(2,1))
plot2 = mapCountryData(n, nameColumnToPlot="2013GINI", mapTitle = "2013", addLegend = F)
do.call(addMapLegend, c(plot1, legendLabels="all", legendIntervals="data", legendMar = 2 ))
plot1 = mapCountryData(n, nameColumnToPlot="1981GINI", mapTitle = "1981", addLegend = F)
do.call(addMapLegend, c(plot1, legendLabels="all", legendIntervals="data", legendMar = 2 ))
setwd("~/IS607Spring2016/project-final/usa-files")
df_county <- read.csv(paste0(getwd(),"/GINI-2014-County.csv"))
df_county <- mutate(df_county,FIPS=substring(df_county$GEOID,10,15))
setwd("~/IS607Spring2016/project-final/usa-files/cb_2014_us_county_5m/")
US.counties <- readOGR(dsn=".",layer="gz_2010_us_050_00_5m")
#leave out AK, HI, and PR (state FIPS: 02, 15, and 72)
US.counties <- US.counties[!(US.counties$STATE %in% c("02","15","72")),]
county.data <- US.counties@data
county.data <- cbind(id=rownames(county.data),county.data)
county.data <- data.table(county.data)
county.data[,FIPS:=paste0(STATE,COUNTY)] # this is the state + county FIPS code
setkey(county.data,FIPS)
gini.data <- data.table(df_county)
gini.data[] <- lapply(gini.data, as.character)
setkey(gini.data,FIPS)
county.data[gini.data,GINI:=GINI]
map.df <- data.table(fortify(US.counties))
setkey(map.df,id)
setkey(county.data,id)
map.df[county.data,GINI:=GINI]
map.df <- mutate(map.df,GINI.NUM=as.numeric(as.character((GINI))))
setwd("~/IS607Spring2016/project-final")
library(ineq)
library(rgdal)        # for readOGR(...)
library(RColorBrewer) # for brewer.pal(...)
library(data.table)
library(maptools)
library(gpclib)
library(maps)
library(ggplot2)
library(ggthemes)
library(graphics)
library(grid)
library(gridExtra)
library(jsonlite)
library(tigris)
library(tidyr)
library(dplyr)
library(httr)
library(RCurl)
library(rworldmap)
library(Quandl)
library(RPostgreSQL)
setwd("~/IS607Spring2016/project-final")
setwd("~/IS607Spring2016/project-final")
library(ineq)
library(rgdal)        # for readOGR(...)
library(RColorBrewer) # for brewer.pal(...)
library(data.table)
library(maptools)
library(gpclib)
library(maps)
library(ggplot2)
library(ggthemes)
library(graphics)
library(grid)
library(gridExtra)
library(jsonlite)
library(tigris)
library(tidyr)
library(dplyr)
library(httr)
library(RCurl)
library(rworldmap)
library(Quandl)
library(RPostgreSQL)
setwd("~/IS607Spring2016/project-final/usa-files")
df_county <- read.csv(paste0(getwd(),"/GINI-2014-County.csv"))
df_county <- mutate(df_county,FIPS=substring(df_county$GEOID,10,15))
setwd("~/IS607Spring2016/project-final/usa-files/cb_2014_us_county_5m/")
US.counties <- readOGR(dsn=".",layer="gz_2010_us_050_00_5m")
#leave out AK, HI, and PR (state FIPS: 02, 15, and 72)
US.counties <- US.counties[!(US.counties$STATE %in% c("02","15","72")),]
county.data <- US.counties@data
county.data <- cbind(id=rownames(county.data),county.data)
county.data <- data.table(county.data)
county.data[,FIPS:=paste0(STATE,COUNTY)] # this is the state + county FIPS code
setkey(county.data,FIPS)
gini.data <- data.table(df_county)
gini.data[] <- lapply(gini.data, as.character)
setkey(gini.data,FIPS)
county.data[gini.data,GINI:=GINI]
map.df <- data.table(fortify(US.counties))
setkey(map.df,id)
setkey(county.data,id)
map.df[county.data,GINI:=GINI]
map.df <- mutate(map.df,GINI.NUM=as.numeric(as.character((GINI))))
US.cities <- world.cities[world.cities$country.etc == "USA",]
US.counties <- map_data('county')
US.counties <-  US.counties %>%
group_by(subregion) %>%
summarise(avglat = mean(lat), avglong = mean(long))
xprod <- merge(x = US.counties, y = US.cities, by = NULL)
xprod <- xprod %>%
mutate(dist = sqrt((xprod$avglat - xprod$lat)^2 + (xprod$avglong - xprod$long)^2))
US.counties.trx <- xprod %>%
group_by(subregion) %>%
summarise(disttocity=min(dist))
US.counties <- left_join(US.counties, US.counties.trx)
colnames(US.counties)[1] <- "GEOLABEL"
gini.data$GEOLABEL <- gsub("(.*),.*", "\\1",x = gsub(pattern = " county", replacement = "", x = tolower(gini.data$GEOLABEL)))
US.counties <- inner_join(US.counties, gini.data)
View(US.cities)
US.cities <- filter(world.cities[world.cities$country.etc == "USA",]$pop >= 100000)
filter(world.cities[world.cities$country.etc == "USA",]$pop >= 100000)
library(dplyr)
filter(world.cities[world.cities$country.etc == "USA",]$pop >= 100000)
filter(world.cities[world.cities$country.etc == "USA",]$pop > 100000)
filter(world.cities[world.cities$country.etc == "USA",]$pop > 100000)
filter(US.cities$pop > 100000)
US.cities %>%
filter(US.cities$pop > 100000)
US.cities <- US.cities %>%
filter(US.cities$pop > 100000)
US.counties <- map_data('county')
US.counties <-  US.counties %>%
group_by(subregion) %>%
summarise(avglat = mean(lat), avglong = mean(long))
xprod <- merge(x = US.counties, y = US.cities, by = NULL)
xprod <- xprod %>%
mutate(dist = sqrt((xprod$avglat - xprod$lat)^2 + (xprod$avglong - xprod$long)^2))
US.counties.trx <- xprod %>%
group_by(subregion) %>%
summarise(disttocity=min(dist))
US.counties <- left_join(US.counties, US.counties.trx)
colnames(US.counties)[1] <- "GEOLABEL"
gini.data$GEOLABEL <- gsub("(.*),.*", "\\1",x = gsub(pattern = " county", replacement = "", x = tolower(gini.data$GEOLABEL)))
US.counties <- inner_join(US.counties, gini.data)
attach(US.counties)
plot(disttocity, GINI, main="Scatterplot GINI - Urbanization", xlab="DIST ", ylab="GINI ", pch=19)
abline(lm(GINI~disttocity), col="red") # regression line (y~x)
summary(lm(GINI ~ `disttocity`, data = US.counties))
View(US.cities)
View(xprod)
setwd("~/IS607Spring2016/project-final/usa-files")
df_county <- read.csv(paste0(getwd(),"/GINI-2014-County.csv"))
df_county <- mutate(df_county,FIPS=substring(df_county$GEOID,10,15))
setwd("~/IS607Spring2016/project-final/usa-files/cb_2014_us_county_5m/")
US.counties <- readOGR(dsn=".",layer="gz_2010_us_050_00_5m")
#leave out AK, HI, and PR (state FIPS: 02, 15, and 72)
US.counties <- US.counties[!(US.counties$STATE %in% c("02","15","72")),]
county.data <- US.counties@data
county.data <- cbind(id=rownames(county.data),county.data)
county.data <- data.table(county.data)
county.data[,FIPS:=paste0(STATE,COUNTY)] # this is the state + county FIPS code
setkey(county.data,FIPS)
gini.data <- data.table(df_county)
gini.data[] <- lapply(gini.data, as.character)
setkey(gini.data,FIPS)
county.data[gini.data,GINI:=GINI]
map.df <- data.table(fortify(US.counties))
setkey(map.df,id)
setkey(county.data,id)
map.df[county.data,GINI:=GINI]
map.df <- mutate(map.df,GINI.NUM=as.numeric(as.character((GINI))))
US.cities <- filter(world.cities[world.cities$country.etc == "USA",]$pop > 100000)
US.cities <- US.cities %>%
filter(US.cities$pop > 100000)
US.counties <- map_data('county')
US.counties <-  US.counties %>%
group_by(subregion) %>%
summarise(avglat = mean(lat), avglong = mean(long))
US.cities <- filter(world.cities[world.cities$country.etc == "USA",]$pop > 100000)
US.cities <- US.cities %>%
filter(US.cities$pop > 100000)
US.cities <- world.cities[world.cities$country.etc == "USA",]
US.cities <- US.cities %>%
filter(US.cities$pop > 100000)
xprod <- merge(x = US.counties, y = US.cities, by = NULL)
US.counties.trx <- xprod %>%
group_by(subregion) %>%
mutate(dist = sqrt((xprod$avglat - xprod$lat)^2 + (xprod$avglong - xprod$long)^2)) %>%
summarise(disttocity=min(dist))
US.counties.trx <- xprod %>%
group_by(subregion) %>%
mutate(dist = sqrt((xprod$avglat - xprod$lat)^2 + (xprod$avglong - xprod$long)^2))
xprod %>%
group_by(subregion) %>%
mutate(dist = sqrt((xprod$avglat - xprod$lat)^2 + (xprod$avglong - xprod$long)^2))
xprod %>%
group_by(subregion)
US.counties.trx <- xprod %>%
group_by(subregion)
View(US.counties.trx)
setwd("~/IS607Spring2016/project-final/usa-files")
df_county <- read.csv(paste0(getwd(),"/GINI-2014-County.csv"))
df_county <- mutate(df_county,FIPS=substring(df_county$GEOID,10,15))
setwd("~/IS607Spring2016/project-final/usa-files/cb_2014_us_county_5m/")
US.counties <- readOGR(dsn=".",layer="gz_2010_us_050_00_5m")
#leave out AK, HI, and PR (state FIPS: 02, 15, and 72)
US.counties <- US.counties[!(US.counties$STATE %in% c("02","15","72")),]
county.data <- US.counties@data
county.data <- cbind(id=rownames(county.data),county.data)
county.data <- data.table(county.data)
county.data[,FIPS:=paste0(STATE,COUNTY)] # this is the state + county FIPS code
setkey(county.data,FIPS)
gini.data <- data.table(df_county)
gini.data[] <- lapply(gini.data, as.character)
setkey(gini.data,FIPS)
county.data[gini.data,GINI:=GINI]
map.df <- data.table(fortify(US.counties))
setkey(map.df,id)
setkey(county.data,id)
map.df[county.data,GINI:=GINI]
map.df <- mutate(map.df,GINI.NUM=as.numeric(as.character((GINI))))
US.cities <- filter(world.cities[world.cities$country.etc == "USA",]
US.cities <- US.cities %>%
filter(US.cities$pop > 100000)
US.counties <- map_data('county')
US.cities <- world.cities[world.cities$country.etc == "USA",]
US.cities <- US.cities %>%
filter(US.cities$pop > 100000)
US.counties <- map_data('county')
US.counties <-  US.counties %>%
group_by(subregion) %>%
summarise(avglat = mean(lat), avglong = mean(long))
xprod <- merge(x = US.counties, y = US.cities, by = NULL)
test<- xprod %>%
group_by(subregion) %>%
mutate(dist = sqrt((xprod$avglat - xprod$lat)^2 + (xprod$avglong - xprod$long)^2))
test<- xprod %>%
group_by(subregion)
View(test)
test<- xprod %>%
group_by(subregion) %>%
summarize(sqrt((xprod$avglat - xprod$lat)^2 + (xprod$avglong - xprod$long)^2))
test<- xprod %>%
group_by(subregion) %>%
mutate(dist = min(sqrt((xprod$avglat - xprod$lat)^2 + (xprod$avglong - xprod$long)^2))
test<- xprod %>%
group_by(subregion) %>%
mutate(dist = min(sqrt((xprod$avglat - xprod$lat)^2 + (xprod$avglong - xprod$long)^2)))
View(test)
View(test)
test<- xprod %>%
mutate(dist = sqrt((xprod$avglat - xprod$lat)^2 + (xprod$avglong - xprod$long)^2))
View(test)
test2 <- test %>%
select (subregion, name, dist)
View(test2)
test2 <- test %>%
select (subregion, name, dist) %>%
group_by(subregion)
View(test)
View(test2)
test2 <- test %>%
select (subregion, name, dist) %>%
group_by(subregion)
filter(dist=min(dist))
test2 <- test %>%
select (subregion, name, dist) %>%
group_by(subregion)
summarize(dist=min(dist))
test2 <- test %>%
select (subregion, name, dist) %>%
group_by(subregion)
summarize(disttocity=min(dist))
test2 <- test %>%
select (subregion, name, dist) %>%
group_by(subregion) %>%
summarize(disttocity=min(dist))
View(test2)
View(test2)
test2 <- test %>%
select (subregion, name, dist) %>%
group_by(subregion,name) %>%
summarize(disttocity=min(dist))
test2 <- test %>%
select (subregion, name, dist) %>%
group_by(subregion,name) %>%
summarize(disttocity=min(dist))
View(test2)
test2 <- test %>%
select (subregion, name, dist) %>%
group_by(subregion) %>%
summarize(disttocity=min(dist), max(name))
View(test2)
test2 <- test %>%
select (subregion, name, dist) %>%
group_by(subregion) %>%
summarize(disttocity=min(dist), min(name))
View(test2)
test <- xprod %>%
mutate(dist = sqrt((xprod$avglat - xprod$lat)^2 + (xprod$avglong - xprod$long)^2)) %>%
select (subregion, name, dist) %>%
group_by(subregion) %>%
summarize(disttocity=min(dist))
View(test)
setwd("~/IS607Spring2016/project-final/usa-files")
df_county <- read.csv(paste0(getwd(),"/GINI-2014-County.csv"))
df_county <- mutate(df_county,FIPS=substring(df_county$GEOID,10,15))
setwd("~/IS607Spring2016/project-final/usa-files/cb_2014_us_county_5m/")
US.counties <- readOGR(dsn=".",layer="gz_2010_us_050_00_5m")
#leave out AK, HI, and PR (state FIPS: 02, 15, and 72)
US.counties <- US.counties[!(US.counties$STATE %in% c("02","15","72")),]
county.data <- US.counties@data
county.data <- cbind(id=rownames(county.data),county.data)
county.data <- data.table(county.data)
county.data[,FIPS:=paste0(STATE,COUNTY)] # this is the state + county FIPS code
setkey(county.data,FIPS)
gini.data <- data.table(df_county)
gini.data[] <- lapply(gini.data, as.character)
setkey(gini.data,FIPS)
county.data[gini.data,GINI:=GINI]
map.df <- data.table(fortify(US.counties))
setkey(map.df,id)
setkey(county.data,id)
map.df[county.data,GINI:=GINI]
map.df <- mutate(map.df,GINI.NUM=as.numeric(as.character((GINI))))
US.cities <- world.cities[world.cities$country.etc == "USA",]
US.cities <- US.cities %>%
filter(US.cities$pop > 100000)
US.counties <- map_data('county')
US.counties <-  US.counties %>%
group_by(subregion) %>%
summarise(avglat = mean(lat), avglong = mean(long))
xprod <-  merge(x = US.counties, y = US.cities, by = NULL) %>%
mutate(dist = sqrt((xprod$avglat - xprod$lat)^2 + (xprod$avglong - xprod$long)^2)) %>%
select (subregion, name, dist) %>%
group_by(subregion) %>%
summarize(disttocity=min(dist))
US.cities <- world.cities[world.cities$country.etc == "USA",]
US.cities <- US.cities %>%
filter(US.cities$pop > 100000)
US.counties <- map_data('county')
US.counties <-  US.counties %>%
group_by(subregion) %>%
summarise(avglat = mean(lat), avglong = mean(long))
xprod <- merge(x = US.counties, y = US.cities, by = NULL)
xprod <- xprod %>%
mutate(dist = sqrt((xprod$avglat - xprod$lat)^2 + (xprod$avglong - xprod$long)^2)) %>%
select (subregion, name, dist) %>%
group_by(subregion) %>%
summarize(disttocity=min(dist))
View(xprod)
colnames(US.counties)[1] <- "GEOLABEL"
gini.data$GEOLABEL <- gsub("(.*),.*", "\\1",x = gsub(pattern = " county", replacement = "", x = tolower(gini.data$GEOLABEL)))
US.counties <- inner_join(US.counties, gini.data)
attach(US.counties)
plot(disttocity, GINI, main="Scatterplot GINI - Urbanization", xlab="DIST ", ylab="GINI ", pch=19)
abline(lm(GINI~disttocity), col="red") # regression line (y~x)
summary(lm(GINI ~ `disttocity`, data = US.counties))
